---
- name: Set ansible variables
  include_vars: vars/main.yml

- name: Retrieve first public key fingerprint 
  uri:
    url: https://robot-ws.your-server.de/key
    return_content: yes
    method: GET
    user: "{{ hetzner_webservice_username }}"
    password: "{{ hetzner_webservice_password }}"
    force_basic_auth: yes
    status_code: 200
  register: key
  delegate_to: localhost

- name: Set authorized_key fact
  set_fact:
    authorized_key: "{{ key.json[0].key.fingerprint }}"

- name: Check rescue mode
  uri:
    url: "https://robot-ws.your-server.de/boot/{{ hetzner_ip }}/rescue"
    method: GET
    user: "{{ hetzner_webservice_username }}"
    password: "{{ hetzner_webservice_password }}"
    force_basic_auth: yes
    status_code: 200
  register: rescue
  delegate_to: localhost

- name: Activate rescue mode - OS
  when:  rescue.json.rescue.active == false
#  when: ansible_distribution == "RedHat"
  uri:
    url: "https://robot-ws.your-server.de/boot/{{ hetzner_ip }}/rescue"
    method: POST
    user: "{{ hetzner_webservice_username }}"
    password: "{{ hetzner_webservice_password }}"
    force_basic_auth: yes
    body: "os=linux&arch=64&authorized_key={{ authorized_key }}"
    status_code: 200
    headers:
      Content_Type: "application/x-www-form-urlencoded"
  register: activated
  delegate_to: localhost

# - name: Activate rescue mode - rescue 
#  when:  rescue.json.rescue.active == false
#   when: ansible_distribution == "Debian"
#   uri:
#     url: "https://robot-ws.your-server.de/boot/{{ ansible_eth0.ipv4.address }}/rescue"
#     method: POST
#     user: "{{ hetzner_webservice_username }}"
#     password: "{{ hetzner_webservice_password }}"
#     force_basic_auth: yes
#     body: "os=linux&arch=64&authorized_key={{ authorized_key }}"
#     status_code: 200
#     headers:
#       Content_Type: "application/x-www-form-urlencoded"
#   register: activated

- name: Execute hardware reset
  uri:
    url: "https://robot-ws.your-server.de/reset/{{ hetzner_ip }}"
    method: POST
    user: "{{ hetzner_webservice_username }}"
    password: "{{ hetzner_webservice_password }}"
    force_basic_auth: yes
    body: "type=hw"
    status_code: 200
    headers:
      Content-Type: "application/x-www-form-urlencoded"
  delegate_to: localhost

- name: Remove server from local known_hosts file
  local_action: command  /usr/bin/ssh-keygen -R {{ inventory_hostname }}
  ignore_errors: yes

- name: Pause a bit for the hardware reset to kick in
  pause: seconds=15

- name: Wait 300 seconds for port 22 to become open
  wait_for:
    port: 22
    host: '{{ hetzner_ip }}'
    delay: 10
    timeout: 300
  connection: local

- name: scan for keys
  local_action: shell ssh-keyscan -t ecdsa  hetzner,{{ hetzner_ip }}  2>/dev/null >> ~/.ssh/known_hosts
  ignore_errors: yes

- name: Copy autosetup configuration file
  template:
    src: "{{ hetzner_autosetup_file }}"
    dest: /autosetup
    owner: root
    group: root
    mode: 0644

#FIXME: This isn't working because of ready only FS. Using ignore_errors for installimage until fixed
#- name: Fix Hetzner for usage of RHEL image
#  lineinfile:
#    path: /root/.oldroot/nfs/install/centos.sh
#    regexp: "{{ item }}"
#    state: absent
#  with_items:
#    - yum check-update
#    - yum -y install polkit

- name: Run installimage 
  command: /root/.oldroot/nfs/install/installimage
  ignore_errors: yes
  register: result

- name: Reboot server
  shell: sleep 2 && shutdown -r now
  async: 1
  poll: 0
  ignore_errors: yes

- name: Remove server from local known_hosts file
  local_action: command  /usr/bin/ssh-keygen -R {{ inventory_hostname }}
  ignore_errors: yes

- name: Wait 300 seconds for port 22 to become open
  wait_for:
    port: 22
    host: '{{ hetzner_ip }}'
    delay: 10
    timeout: 300
  connection: local

- name: scan for keys
  local_action: shell ssh-keyscan -t ecdsa  hetzner,{{ hetzner_ip }}  2>/dev/null >> ~/.ssh/known_hosts
  ignore_errors: yes

